/*
 * This file is part of the ux_gui_stream distribution
 * (https://github.com/amatarazzo777/ux_gui_stream).
 * Copyright (c) 2020 Anthony Matarazzo.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#pragma once

/**
@author Anthony Matarazzo
@file interface_guid.h
@date 10/24/20
@version 1.0
@details

*/
namespace uxapi {
namespace interface_alias {
typedef static const std::array<std::unit8_t, 16> interface_guid_t;

interface_guid_t created_internally_not_shared_t = {
    0x17, 0xe5, 0x7b, 0xf3, 0x9d, 0x4d, 0xcd, 0x48,
    0xb7, 0xfa, 0x3a, 0xb1, 0x78, 0x0e, 0x13, 0x47};

interface_guid_t shared_resource_t = {0x96, 0x7d, 0x66, 0xbd, 0x44, 0x15,
                                      0xe9, 0x41, 0x93, 0x7c, 0x31, 0x8c,
                                      0x14, 0x03, 0xde, 0xf4};

interface_guid_t display_unit_t = {0xd5, 0x06, 0x1b, 0xd0, 0x90, 0x6a,
                                   0x80, 0x4c, 0x81, 0x6f, 0xe5, 0x4d,
                                   0x2d, 0x9b, 0x0f, 0xd2};

interface_guid_t listener_t = {0x8a, 0x51, 0x9f, 0x98, 0x83, 0x92, 0xf3, 0x46,
                               0x91, 0xe2, 0x7d, 0x59, 0x3f, 0x63, 0xa4, 0x69};

interface_guid_t display_visual_t = {0xd2, 0xf7, 0x10, 0xd2, 0x50, 0x1a,
                                     0x6d, 0x40, 0x84, 0x6b, 0x1e, 0xf1,
                                     0xc3, 0xf3, 0x80, 0xb1};

interface_guid_t raw_std_string_t = {0x5f, 0xb7, 0x1c, 0x81, 0xaf, 0x3f,
                                     0x07, 0x41, 0xba, 0x46, 0xac, 0xa9,
                                     0x21, 0x2d, 0x4d, 0x97};

interface_guid_t link_table_entry_t = {0x53, 0xbf, 0x65, 0xbd, 0x50, 0xb9,
                                       0xd8, 0x4a, 0x86, 0xa7, 0x4c, 0xf4,
                                       0xc1, 0x43, 0x20, 0x2e};

interface_guid_t absolute_coordinate_t = {0xcf, 0xcf, 0x80, 0x28, 0xe4, 0x8b,
                                          0x41, 0x52, 0xa3, 0x46, 0x72, 0x62,
                                          0x56, 0xdc, 0xdd, 0x78};

interface_guid_t relative_coordinate_t = {0x47, 0x5e, 0xcf, 0x9b, 0x73, 0x99,
                                          0x49, 0xad, 0xa3, 0x7b, 0x16, 0x49,
                                          0x8e, 0x6e, 0x5d, 0x32};

interface_guid_t coordinate_t = {0x13, 0x08, 0xdb, 0xba, 0xf6, 0x8f,
                                 0x44, 0xb2, 0x92, 0x5a, 0x48, 0x48,
                                 0x31, 0x51, 0xb6, 0xcc};

interface_guid_t image_block_t = {0xbe, 0xcf, 0x60, 0xa2, 0xcd, 0x5f,
                                  0x43, 0xf4, 0x95, 0x88, 0x80, 0x49,
                                  0x0f, 0x3b, 0x92, 0xd0};

interface_guid_t mask_t = {0x37, 0xe3, 0x7c, 0xc4, 0xbe, 0xc9, 0x4e, 0x60,
                           0x96, 0x22, 0x46, 0x9c, 0xd3, 0x35, 0x26, 0xfb};

interface_guid_t fill_path_t = {0x00, 0x20, 0x1c, 0x6a, 0xbc, 0xed, 0x4f, 0x13,
                                0xa4, 0x5a, 0x2e, 0xba, 0x06, 0x2c, 0x1e, 0x7d};

interface_guid_t paint_t = {0x77, 0x69, 0x3f, 0x28, 0xdd, 0x74, 0x46, 0x70,
                            0xab, 0x2f, 0x17, 0xaf, 0x2f, 0xf0, 0xde, 0xbb};

interface_guid_t stroke_fill_path_t = {0x0e, 0x23, 0x23, 0x3f, 0xbf, 0xcb,
                                       0x4b, 0x34, 0xa2, 0x48, 0x1e, 0x00,
                                       0xe1, 0xea, 0xb6, 0x74};

interface_guid_t stroke_path_t = {0x23, 0x66, 0x83, 0x23, 0xfa, 0x30,
                                  0x46, 0x64, 0x82, 0xc9, 0xfa, 0xef,
                                  0x95, 0x56, 0x8f, 0x08};

interface_guid_t antialias_t = {0xec, 0xd7, 0x46, 0xbd, 0xcc, 0x1d, 0x40, 0x86,
                                0xbf, 0xa0, 0x92, 0xea, 0xe5, 0x89, 0x74, 0xc8};

interface_guid_t graphic_operator_t = {0x88, 0xa9, 0x0b, 0xd6, 0x22, 0x2f,
                                       0x4a, 0x9b, 0x80, 0x28, 0x69, 0xba,
                                       0xf9, 0xb9, 0x45, 0x22};

interface_guid_t line_cap_t = {0x2c, 0xf1, 0x85, 0x3c, 0x8b, 0xff, 0x46, 0x83,
                               0x97, 0x06, 0x44, 0xf8, 0x14, 0xc2, 0x2e, 0xde};

interface_guid_t line_dashes_t = {0xff, 0xf9, 0xc7, 0x5a, 0xf3, 0x76,
                                  0x43, 0xd6, 0xab, 0x5c, 0xb6, 0xe4,
                                  0xbd, 0xbc, 0xce, 0x84};

interface_guid_t line_join_t = {0xd8, 0x53, 0x59, 0x7f, 0x80, 0xb5, 0x4b, 0x00,
                                0x81, 0xe4, 0xcf, 0x75, 0xaf, 0xbe, 0x8a, 0xa7};

interface_guid_t line_width_t = {0x71, 0xc0, 0xdd, 0x70, 0xd3, 0x39,
                                 0x41, 0xb4, 0x8a, 0x6b, 0xa0, 0x92,
                                 0xa5, 0x32, 0xb7, 0x9b};

interface_guid_t miter_limit_t = {0xc8, 0x8c, 0x7d, 0xe6, 0xff, 0x8d,
                                  0x4d, 0x53, 0xab, 0xee, 0xad, 0x9a,
                                  0x33, 0xfa, 0xae, 0x7e};

interface_guid_t tollerance_t = {0x9e, 0x3d, 0x6d, 0x89, 0x2f, 0x5e,
                                 0x47, 0x5e, 0xad, 0x72, 0xc9, 0x18,
                                 0x98, 0xee, 0x71, 0x9e};

interface_guid_t arc_t = {0xa0, 0x3a, 0x15, 0x6c, 0x58, 0xfa, 0x4b, 0x1d,
                          0xaf, 0x2e, 0xf9, 0x41, 0xab, 0xbb, 0x68, 0xb7};

interface_guid_t close_path_t = {0x60, 0x65, 0x49, 0x3b, 0xdd, 0xfa,
                                 0x43, 0x63, 0xb5, 0xaa, 0x95, 0x11,
                                 0x31, 0x35, 0x7f, 0xf8};

interface_guid_t curve_t = {0x4f, 0xde, 0x85, 0x79, 0xd5, 0x69, 0x4d, 0x32,
                            0x94, 0xea, 0xac, 0x38, 0x11, 0x1b, 0xd6, 0x2b};
interface_guid_t hline_t = {0xc8, 0x89, 0x4e, 0x10, 0x7c, 0xc6, 0x47, 0xd4,
                            0x85, 0x21, 0xa8, 0x63, 0xf7, 0x4a, 0x72, 0xb9};

interface_guid_t line_t = {0x7a, 0x40, 0xf8, 0xf4, 0x11, 0x7f, 0x4f, 0x77,
                           0x94, 0x6b, 0xbc, 0xe1, 0x47, 0x4d, 0xb4, 0x98};

interface_guid_t negative_arc_t = {0x38, 0x47, 0x8b, 0x4b, 0x5b, 0xef,
                                   0x43, 0xa7, 0x9d, 0xd1, 0x85, 0xb5,
                                   0x24, 0xbe, 0x13, 0xa6};

interface_guid_t vline_t = {0xde, 0xdf, 0xe9, 0x0d, 0x22, 0xe1, 0x4c, 0x18,
                            0xbb, 0x0d, 0xee, 0x2e, 0x28, 0xaf, 0x76, 0x36};

interface_guid_t rectangle_t = {0xac, 0xad, 0x1c, 0xf9, 0x42, 0x78, 0x4b, 0xc5,
                                0xae, 0xdc, 0xdf, 0xb5, 0x35, 0x82, 0x02, 0x1b};

interface_guid_t surface_area_brush_t = {0x95, 0x57, 0xa1, 0x8c, 0x67, 0x70,
                                         0x43, 0x94, 0xa0, 0x0c, 0x39, 0xd5,
                                         0x31, 0x6d, 0xde, 0x3a};

interface_guid_t surface_area_title_t = {0x95, 0x24, 0x67, 0x0f, 0x06, 0x98,
                                         0x45, 0x2f, 0xaa, 0x07, 0x8d, 0x81,
                                         0x7f, 0x9e, 0xbb, 0x65};

interface_guid_t text_alignment_t = {0xfe, 0x84, 0x64, 0x58, 0x65, 0x88,
                                     0x44, 0xcc, 0x9f, 0x71, 0xcf, 0x82,
                                     0xd1, 0x87, 0xc7, 0x89};

interface_guid_t text_color_t = {0xc5, 0xa3, 0xcc, 0xcf, 0xdd, 0x57,
                                 0x49, 0x2f, 0xbd, 0x24, 0x38, 0x5b,
                                 0x82, 0x4b, 0xe5, 0x9a};

interface_guid_t text_data_t = {0x49, 0x58, 0xa1, 0xca, 0xff, 0x18, 0x45, 0x10,
                                0xa1, 0x3a, 0xb3, 0x48, 0x23, 0xf8, 0x06, 0x9b};

interface_guid_t text_ellipsize_t = {0x1f, 0x51, 0x99, 0x17, 0x66, 0xa6,
                                     0x4f, 0xdd, 0x8c, 0xd2, 0xc4, 0x49,
                                     0x71, 0x4d, 0xb9, 0x95};

interface_guid_t text_fill_t = {0x1b, 0xd5, 0xb1, 0x5d, 0xcd, 0x89, 0x42, 0x98,
                                0xab, 0xfe, 0x93, 0x8f, 0xa7, 0xae, 0xd3, 0x61};

interface_guid_t text_font_t = {0x64, 0x02, 0x9a, 0xbe, 0x0e, 0x25, 0x42, 0x76,
                                0x9f, 0x5d, 0x40, 0x25, 0x31, 0x0f, 0x61, 0x7d};

interface_guid_t text_indent_t = {0x17, 0xdb, 0x76, 0x70, 0xa7, 0x97,
                                  0x4b, 0x02, 0x81, 0x17, 0x1f, 0x65,
                                  0x48, 0x51, 0x2e, 0x36};

interface_guid_t text_line_space_t = {0x08, 0xcb, 0x73, 0x71, 0xc7, 0xae,
                                      0x46, 0x4e, 0xa4, 0x65, 0x92, 0xf6,
                                      0xb7, 0xa6, 0x72, 0xfb};

interface_guid_t text_render_normal_t = {0x8a, 0x68, 0x74, 0x43, 0x52, 0x77,
                                         0x42, 0x57, 0xad, 0xd6, 0xd9, 0xcb,
                                         0x45, 0x3f, 0xe2, 0xd1};

interface_guid_t text_outline_t = {0x4e, 0x37, 0x18, 0xed, 0x73, 0xde,
                                   0x41, 0x70, 0x80, 0x59, 0x9c, 0x9b,
                                   0x55, 0x22, 0x70, 0xb7};

interface_guid_t text_render_path_t = {0xf7, 0xd2, 0x1d, 0x84, 0xa3, 0x16,
                                       0x44, 0x67, 0x96, 0xee, 0xbb, 0x81,
                                       0xcd, 0x0d, 0x51, 0xc5};

interface_guid_t text_shadow_t = {0xcc, 0xe5, 0x7f, 0x13, 0xff, 0xc7,
                                  0x4b, 0x3d, 0xa8, 0xd0, 0x73, 0x85,
                                  0x70, 0xca, 0x25, 0x8b};

interface_guid_t text_tab_stops_t = {0x51, 0x9f, 0x33, 0x25, 0xec, 0x00,
                                     0x4f, 0xee, 0xb7, 0xf2, 0x0d, 0x3a,
                                     0x8d, 0x9c, 0x31, 0x96};

} // namespace interface_alias

class raw_std_string_t {
public:
  char *ptr = {};
  std::size_t size = {};
  interface_guid_t alias = interface_alias::link_table_entry_t;
};

struct link_table_entry_t {
  std::array<std::unit8_t, 16> guid;
  void *ptr;
  interface_guid_t alias = interface_alias::link_table_entry_t;
};

} // namespace uxapi
